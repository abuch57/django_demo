version: 2.1

orbs:
  python: circleci/python@2.1.1
  gcp-gcr: circleci/gcp-gcr@0.15.0
  gcp-gke: circleci/gcp-gke@1.4.0
  kubernetes: circleci/kubernetes@1.3.0

executors:
  python:
      docker:
          - image: cimg/python:3.10.7

parameters:
  cleanup:
    type: boolean
    default: false
    description: Should this run cleanup an old deploy?
  version:
    type: string
    default: ""
    description: the version (latest or prior) to be deleted
  job_name:
    type: string
    default: delete deployment

commands:
  set-build-env:
    description: "Set environment variables needed for building"
    steps:
      - checkout
      - run:
          name: Setup Build Environment Variables
          command: |
            echo "export VERSION=$(cat VERSION)" >> $BASH_ENV
            source $BASH_ENV

jobs:
  build:
    executor: python/default
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip

  test:
    executor: python
    parallelism: 2
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run tests
          command: |
            # get test files while ignoring __init__ files
            TESTFILES=$(circleci tests glob "polls/polls_tests.py" | sed 's/\S\+__init__.py//g')
            echo $TESTFILES | tr ' ' '\n' | sort | uniq > circleci_test_files.txt
            cat circleci_test_files.txt
            TESTFILES=$(circleci tests split --split-by=timings circleci_test_files.txt)
            # massage filepaths into format manage.py test accepts
            TESTFILES=$(echo $TESTFILES | tr "/" "." | sed 's/\.py$//g')
            echo $TESTFILES
            pipenv run python manage.py test --verbosity=2 $TESTFILES
#            set -e
#            TEST_FILES=$(circleci tests glob "polls/polls_tests.py" | circleci tests split --split-by=timings)
#            mkdir -p test-results
#            pytest --verbose --junitxml=test-results/junit.xml $TEST_FILES
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
#      - python/test
#
#      - restore_cache:
#          key: -pypi-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>{{ checksum "<< parameters.app-dir >>/<<parameters.pip-dependency-file>>" }}-<<#parameters.include-python-in-cache-key>>{{ checksum "/home/circleci/.pyenv/version" }}-<</parameters.include-python-in-cache-key>>
#      - python/install-packages:
#          args: pytest
#          pkg-manager: pip
#          pypi-cache: false
#      - run: mkdir test-report
#      - run: pytest --circleci-parallelize --junit-xml=test-report/report.xml
#      - store_test_results:
#          path: test-report
#      - store_artifacts:
#          path: test-report

  lint:
    executor: python/default
    parameters:
      include-branch-in-cache-key:
        default: true
        description: |
          If true, this cache bucket will only apply to jobs within the same branch.
        type: boolean
      pip-dependency-file:
        default: requirements.txt
        description: Name of the requirements file that needs to be installed with pip. Prepended with `app-dir`. If using pipenv or poetry, this is ignored.
        type: string
      cache-version:
        default: v1
        description: Change the default cache version if you need to clear the cache for any reason.
        type: string
      app-dir:
        default: ~/project
        description: Path to the directory containing your python project. Not needed if dependency file lives in the root.
        type: string
      include-python-in-cache-key:
        default: true
        description: |
          If true, this cache bucket will checksum the pyenv python version with the cache-key
        type: boolean
    steps:
      - checkout
      - restore_cache:
          key: -pypi-<<parameters.cache-version>>-<<#parameters.include-branch-in-cache-key>>{{ .Branch }}-<</parameters.include-branch-in-cache-key>>{{ checksum "<< parameters.app-dir >>/<<parameters.pip-dependency-file>>" }}-<<#parameters.include-python-in-cache-key>>{{ checksum "/home/circleci/.pyenv/version" }}-<</parameters.include-python-in-cache-key>>
      - python/install-packages:
          args: pylint
          pkg-manager: pip
          pypi-cache: false
      - run:
          command: |
            pylint polls --exit-zero
          name: linting



  build-and-push-image:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    description: Build and push image to Google Container Registry
    steps:
      - checkout
      - set-build-env
      - gcp-gcr/gcr-auth:
          registry-url: us.gcr.io
#      - gcp-gcr/build-and-push-image:
#          executor: python
#          image: circle-gke
#
#          setup-remote-docker: true
#          use-docker-layer-caching: true
#          tag: "${VERSION}"
      - gcp-gcr/build-image:
          registry-url: us.gcr.io
          image: circle-gke
          tag: "${VERSION}"
      - gcp-gcr/push-image:
          registry-url: us.gcr.io
          image: circle-gke
          tag: "${VERSION}"

  update-deployment:
    docker:
      - image: cimg/base:edge-18.04
    working_directory: ~/repo
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install gettext-base graphviz
      - set-build-env
      - run:
          name: Update image & version in manifest
          command: |
            envsubst < vamp/deployment.yaml > modified-deployment.yaml
            cat modified-deployment.yaml
      - gcp-gke/update-kubeconfig-with-credentials:
          install-kubectl: true
          perform-login: true
          cluster: circle-ci-cluster
      - kubernetes/create-or-update-resource:
          namespace: production
          resource-file-path: modified-deployment.yaml
      - run: kubectl rollout status -f modified-deployment.yaml
      - run:
          name: Capture Contour routes as DAG
          command: |
            sleep 10 
            # let release agent catch deploy, tell contour to shape traffic. 
            # must be a smarter way
            vamp/get-dag-as-dot.sh
            cat contour-dag.dot
      - store_artifacts:
          path: contour-dag.png

  delete-deployment:
    docker:
      - image: cimg/base:edge-18.04
    working_directory: ~/repo
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install gettext-base graphviz
      - set-build-env
      - run:
          name: Update image & version in manifest
          command: |
            envsubst < vamp/deployment.yaml > modified-deployment.yaml
            cat modified-deployment.yaml
      - gcp-gke/update-kubeconfig-with-credentials:
          install-kubectl: true
          perform-login: true
          cluster: circle-ci-cluster
      - run:
          name: Delete deployment << pipeline.parameters.version >>
          command: kubectl -n production delete deployment circleci-django-demo-v<<pipeline.parameters.version>>
      - run:
          name: Capture Contour routes as DAG
          command: |
            sleep 2 
            # let release agent catch deploy, tell contour to shape traffic. 
            # must be a smarter way
            vamp/get-dag-as-dot.sh
            cat contour-dag.dot
      - store_artifacts:
          path: contour-dag.png

workflows:
   main:
     unless: << pipeline.parameters.cleanup >>
     jobs:
       - build
#       - lint:
#           requires:
#             - build
       - test:
           requires:
             - build
#       - manual-approval:
#           type: approval
#           requires:
#             - lint
#             - test
#       - build-and-push-image:
#           requires:
#             - manual-approval
#       - update-deployment:
#           requires:
#             - build-and-push-image

#   the-fixer:
#     when: << pipeline.parameters.cleanup >>
#     jobs:
#       - delete-deployment:
#           name: << pipeline.parameters.job_name >>


###########################################################################################################################
# setup workflows ##
#version: 2.1
#
## denotes that it is setup workflow
#setup: true
#
## using the path filtering orb
#orbs:
#   path-filtering: circleci/path-filtering@0.1.1
#
## workflow using path-filtering orb (w/ built in continuation)
#workflows:
#  setup-workflow:
#    jobs:
#      - path-filtering/filter:
#          base-revision: main
#          config-path: .circleci/continue-config.yml
#          mapping: |
#            mysite/.* mysite true
#            polls/.* polls true
#            .circleci/.* circle-ci true
#            docs/.* docs true
#            shared/.* run-them-all true